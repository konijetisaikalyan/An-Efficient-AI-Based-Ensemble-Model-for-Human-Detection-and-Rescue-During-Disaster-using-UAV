import numpy as np
import cv2
import argparse
from datetime import datetime
import time
import speech_recognition as sr
import threading
import queue
import random
import pygame
import os

def parse_arguments():
    parser = argparse.ArgumentParser(description="Person detection, voice recognition, and GPS location")
    parser.add_argument("--focal-length", type=float, default=800.0, help="Focal length in pixels")
    parser.add_argument("--known-height", type=float, default=170.0, help="Known height of a person in cm")
    parser.add_argument("--output", type=str, default="output.mp4", help="Output video file")
    parser.add_argument("--detection-interval", type=int, default=1, help="Detect people every n frames")
    parser.add_argument("--fps-limit", type=int, default=30, help="FPS limit")
    return parser.parse_args()

def calculate_distance(known_height, focal_length, pixel_height):
    return (known_height * focal_length) / pixel_height

def play_alarm():
    try:
        pygame.mixer.init()
        script_dir = os.path.dirname(os.path.abspath(__file__))
        sound_file = os.path.join(script_dir, "alarm_sound.mp3")
        
        if not os.path.exists(sound_file):
            print(f"Error: Alarm sound file not found at {sound_file}")
            return

        pygame.mixer.music.load(sound_file)
        pygame.mixer.music.play()
        print("Alarm sound started")
    except Exception as e:
        print(f"Error playing alarm sound: {e}")

def voice_recognition(audio_queue, alarm_queue):
    r = sr.Recognizer()
    with sr.Microphone() as source:
        print("Adjusting for ambient noise. Please wait...")
        r.adjust_for_ambient_noise(source, duration=5)
        print("Voice recognition ready!")
        
        alarm_keywords = ["help me", "save me", "rescue me", "hi", "hello", "anybody there"]
        
        while True:
            try:
                audio = r.listen(source, timeout=1, phrase_time_limit=5)
                text = r.recognize_google(audio).lower()
                audio_queue.put(text)
                print(f"Recognized: {text}")  # Debug print
                
                if any(keyword in text for keyword in alarm_keywords):
                    alarm_queue.put(True)
                    print(f"Alarm triggered by: {text}")
            except sr.WaitTimeoutError:
                pass
            except sr.UnknownValueError:
                audio_queue.put("(Unrecognized speech)")
            except sr.RequestError:
                audio_queue.put("(Speech recognition service unavailable)")
            except Exception as e:
                print(f"Error in voice recognition: {e}")

def simulate_gps():
    base_lat, base_lon = 40.7128, -74.0060
    while True:
        lat = base_lat + random.uniform(-0.001, 0.001)
        lon = base_lon + random.uniform(-0.001, 0.001)
        yield lat, lon
        time.sleep(1)

def main():
    args = parse_arguments()

    body_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_fullbody.xml')
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
    upper_body_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_upperbody.xml')

    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        raise IOError("Error: Could not open webcam.")

    frame_width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
    frame_height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))

    fourcc = cv2.VideoWriter_fourcc(*'mp4v')
    out = cv2.VideoWriter(args.output, fourcc, args.fps_limit, (frame_width, frame_height))

    print(f"Press 'q' to quit, 'd' to toggle detection boxes. Output will be saved to {args.output}")

    frame_count = 0
    prev_frame_time = 0
    fps_limit = args.fps_limit
    show_boxes = True

    audio_queue = queue.Queue()
    alarm_queue = queue.Queue()
    voice_thread = threading.Thread(target=voice_recognition, args=(audio_queue, alarm_queue), daemon=True)
    voice_thread.start()

    voice_text_history = []
    max_history = 5

    gps_generator = simulate_gps()

    alarm_active = False
    alarm_start_time = None

    try:
        while True:
            current_time = time.time()
            if current_time - prev_frame_time > 1./fps_limit:
                ret, frame = cap.read()
                if not ret:
                    print("Error: Could not read frame.")
                    break

                frame_count += 1

                if frame_count % args.detection_interval == 0:
                    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
                    bodies = body_cascade.detectMultiScale(gray, 1.1, 3)
                    
                    if len(bodies) == 0:
                        bodies = upper_body_cascade.detectMultiScale(gray, 1.1, 3)

                    faces = face_cascade.detectMultiScale(gray, 1.3, 5)

                    if show_boxes:
                        for (x, y, w, h) in bodies:
                            distance = calculate_distance(args.known_height, args.focal_length, h)
                            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
                            label = f'Person, Dist: {distance:.2f}cm'
                            cv2.putText(frame, label, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2)

                        for (x, y, w, h) in faces:
                            cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)
                            cv2.putText(frame, 'Face', (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 2)

                try:
                    while not audio_queue.empty():
                        voice_text = audio_queue.get_nowait()
                        voice_text_history.append(voice_text)
                        if len(voice_text_history) > max_history:
                            voice_text_history.pop(0)
                    
                    if not alarm_queue.empty():
                        alarm_queue.get_nowait()
                        if not alarm_active:
                            alarm_active = True
                            alarm_start_time = current_time
                            play_alarm()
                except queue.Empty:
                    pass

                for i, text in enumerate(reversed(voice_text_history)):
                    y_position = frame_height - 40 - (i * 30)
                    cv2.putText(frame, f"Voice: {text}", (10, y_position), 
                                cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)

                if alarm_active:
                    cv2.putText(frame, "ALARM ACTIVE", (frame_width - 200, 30), 
                                cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
                    
                    if current_time - alarm_start_time > 10:
                        alarm_active = False
                        pygame.mixer.music.stop()
                        print("Alarm deactivated")

                lat, lon = next(gps_generator)
                gps_text = f"GPS: {lat:.6f}, {lon:.6f}"
                cv2.putText(frame, gps_text, (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)

                timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                cv2.putText(frame, timestamp, (10, frame_height - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)
                
                fps = 1 / (current_time - prev_frame_time)
                cv2.putText(frame, f"FPS: {fps:.2f}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 1)

                out.write(frame)
                
                cv2.imshow('Person Detection, Voice Recognition, and GPS Location', frame)
                
                key = cv2.waitKey(1) & 0xFF
                if key == ord('q'):
                    break
                elif key == ord('d'):
                    show_boxes = not show_boxes

                prev_frame_time = current_time

    except KeyboardInterrupt:
        print("Interrupted by user.")
    except Exception as e:
        print(f"An error occurred: {e}")
    finally:
        cap.release()
        out.release()
        cv2.destroyAllWindows()
        pygame.mixer.quit()

if __name__ == "__main__":
    main()
